// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Moodle.DAL.Migrations
{
    [DbContext(typeof(MoodleContext))]
    [Migration("20240124125752_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Moodle.Domain.entities.Assessment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AssessmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("Moodle.Domain.entities.AssessmentResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AssessmentID")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AssessmentID");

                    b.HasIndex("UserID");

                    b.ToTable("AssessmentResult");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Courses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CourseName = "ASP.NET",
                            Description = "programmation web en c#",
                            UserID = 1
                        });
                });

            modelBuilder.Entity("Moodle.Domain.entities.LearningProgress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("LessonID")
                        .HasColumnType("int");

                    b.Property<int?>("ModuleID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("LessonID");

                    b.HasIndex("ModuleID");

                    b.HasIndex("UserID");

                    b.ToTable("LearningProgress");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Lesson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ModuleID");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Module", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Roles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "eleve",
                            RoleName = "student"
                        });
                });

            modelBuilder.Entity("Moodle.Domain.entities.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "arnaud.vanderschrieck@gmail.com",
                            Password = new byte[] { 20, 87, 64, 154, 95, 211, 94, 82, 84, 57, 88, 216, 125, 143, 239, 192, 45, 8, 56, 6, 190, 71, 152, 88, 233, 55, 87, 227, 201, 146, 37, 148, 214, 1, 14, 70, 56, 157, 251, 236, 228, 160, 215, 221, 122, 238, 153, 29, 114, 181, 134, 3, 247, 107, 51, 99, 172, 9, 231, 76, 128, 182, 250, 191 },
                            RoleID = 1,
                            UserName = "Arnaud"
                        });
                });

            modelBuilder.Entity("Moodle.Domain.entities.Assessment", b =>
                {
                    b.HasOne("Moodle.Domain.entities.Courses", "Course")
                        .WithMany("Assessments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Moodle.Domain.entities.AssessmentResult", b =>
                {
                    b.HasOne("Moodle.Domain.entities.Assessment", "Assessment")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("AssessmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moodle.Domain.entities.Users", "User")
                        .WithMany("AssessmentResults")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Moodle.Domain.entities.LearningProgress", b =>
                {
                    b.HasOne("Moodle.Domain.entities.Courses", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID");

                    b.HasOne("Moodle.Domain.entities.Lesson", "Lesson")
                        .WithMany("LearningProgress")
                        .HasForeignKey("LessonID");

                    b.HasOne("Moodle.Domain.entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleID");

                    b.HasOne("Moodle.Domain.entities.Users", "User")
                        .WithMany("LearningProgress")
                        .HasForeignKey("UserID");

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Lesson", b =>
                {
                    b.HasOne("Moodle.Domain.entities.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Module", b =>
                {
                    b.HasOne("Moodle.Domain.entities.Courses", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Users", b =>
                {
                    b.HasOne("Moodle.Domain.entities.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Assessment", b =>
                {
                    b.Navigation("AssessmentResults");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Courses", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Lesson", b =>
                {
                    b.Navigation("LearningProgress");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Module", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Moodle.Domain.entities.Users", b =>
                {
                    b.Navigation("AssessmentResults");

                    b.Navigation("LearningProgress");
                });
#pragma warning restore 612, 618
        }
    }
}
